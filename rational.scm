(define (make-rat n d)
	(let ((g (gcd n d))
	      (nn (cond ((and (< n 0) (< d 0)) (- n))
		        ((< d 0) (- n))
	                 (else n)))
	      (nd (if (< d 0)
		      (- d)
		      d)))
		(cons (/ nn g) (/ nd g))))

(define (numer r) (car r))
(define (denom r) (cdr r))

(define (print-rat x)
	(display (numer x)) (display "/") (display (denom x))
	(newline))

(define (add-rat a b)
	(make-rat (+ (* (numer a) (denom b))
	             (* (numer b) (denom a)))
	          (* (denom a) (denom b))))
(define (sub-rat a b)
	(make-rat (- (* (numer a) (denom b))
	             (* (numer b) (denom a)))
	          (* (denom a) (denom b))))
(define (mul-rat a b)
	(make-rat (* (numer a) (numer b))
	          (* (denom a) (denom b))))
(define (div-rat a b)
	(make-rat (* (numer a) (denom b))
	          (* (denom a) (numer b))))
(define (equal-rat? a b)
	(= (* (numer a) (denom b))
	   (* (numer b) (denom a))))
