(define (make-interval a b) (cons a b))
(define (lower-bound int) (car int))
(define (upper-bound int) (cdr int))

(define (make-center-width c w)
	(make-interval (- c w) (+ c w)))
(define (make-center-percent c p)
	(define (percent-ratio perc) (/ perc 100.0))
	(make-center-width c (* c (percent-ratio p))))

(define (percent int)
	(* 100.0 (/ (width int) (center int))))
(define (center int)
	(/ (+ (lower-bound int) (upper-bound int)) 2))
(define (width int)
	(/ (- (upper-bound int) (lower-bound int)) 2))

(define (print-interval int)
	(display "[") (display (lower-bound int))
	(display ",") (display (upper-bound int))
	(display "]") (newline))

(define (add-interval x y)
	(make-interval (+ (lower-bound x) (lower-bound y))
	               (+ (upper-bound x) (upper-bound y))))
(define (sub-interval x y)
	(make-interval (- (lower-bound x) (upper-bound y))
	               (- (upper-bound x) (lower-bound y))))
(define (mul-interval x y)
	(let ((p1 (* (lower-bound x) (lower-bound y)))
	      (p2 (* (lower-bound x) (upper-bound y)))
	      (p3 (* (upper-bound x) (lower-bound y)))
	      (p4 (* (upper-bound x) (upper-bound y))))
	(make-interval (min p1 p2 p3 p4)
	               (max p1 p2 p3 p4))))
(define (div-interval x y)
	(if (and (<= (lower-bound y) 0) (>= (upper-bound y) 0))
		(error "division by interval that spans 0" y)
		(mul-interval
			x
			(make-interval (/ 1.0 (upper-bound y))
			               (/ 1.0 (lower-bound y))))))
