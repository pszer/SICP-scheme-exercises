(define (deriv exp var)
	(cond ((number? exp) 0)
	      ((variable? exp) (if (same-variable? exp var) 1 0))
	      (else ((get 'deriv (operator exp))
	             (operands exp) var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

(define (install-primitive-deriv)
	(define (addition exp var)
		(cons '+ (map (lambda (x) (deriv x var) exp))))
	(define (product exp var)
		(let ((u (car exp)) (v (cadr exp)))
			(list '+ (list '* u (deriv v var))
			         (list '* v (deriv u var)))))
	(put 'deriv '+ addition)
	(put 'deriv '* product))
