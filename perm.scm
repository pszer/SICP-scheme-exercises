(define (string-null? str) (= (string-length str) 0))
(define (string-head str end) (substring str 0 end))
(define (string-tail str start) (substring str start (string-length str)))

(define (insert str char)
	(let ((len (string-length str)) (char-str (string char)))
		(define (construct pos result)
			(cond ((= pos len) result)
			      (else (construct (+ pos 1)
			                       (cons (string-append (string-head str pos)
			                                 char-str
			                                 (string-tail str pos))
			                             result)))))
	(cons (string-append str char-str) (construct 0 '()))))

(define (permutations str)
	(define (append-map proc list)
		(define (iter list result)
			(if (null? list)
				result
				(iter (cdr list) (append result (proc (car list))))))
		(iter list '()))
	(let ((len (string-length str)))
		(cond ((= len 0) '())
		      ((= len 1) (list str))
		      (else (append-map (lambda (x) (insert x (string-ref str 0)))
		                        (permutations (string-tail str 1)))))))

(define (list->set list)
	(define (is-element-of-set? x set)
		(cond ((null? set) #f)
		      ((equal? (car set) x) #t)
		      (else (is-element-of-set? x (cdr set)))))
	(define (iter list result)
		(if (null? list)
			result
			(let ((element (car list)))
				(if (is-element-of-set? element result)
				    (iter (cdr list) result)
				    (iter (cdr list) (cons element result))))))
	(reverse (iter list '())))
