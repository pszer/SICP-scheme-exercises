(define (make-segment p q) (cons p q))
(define (start-segment s) (car s))
(define (end-segment   s) (cdr s))

(define (make-point x y) (cons x y))
(define (x-point p) (car p))
(define (y-point p) (cdr p))
(define (print-point p)
	(display "(") (display (x-point p))
	(display ",") (display (y-point p))
	(display ")") (newline))

(define (midpoint-segment seg)
	(define (average a b) (/ (+ a b) 2))
	(let ((s (start-segment seg)) (e (end-segment seg)))
	(make-point (average (x-point s) (x-point e))
	            (average (y-point s) (y-point e)))))

;(define make-rect make-segment)
;(define (rect-x1 r) (x-point (car r)))
;(define (rect-x2 r) (x-point (cdr r)))
;(define (rect-y1 r) (y-point (car r)))
;(define (rect-y2 r) (y-point (cdr r)))
;(define (rect-w r) (abs (- (rect-x1 r) (rect-x2 r))))
;(define (rect-h r) (abs (- (rect-y1 r) (rect-y2 r))))

(define (make-rect x y w h) (cons (cons x y) (cons w h)))
(define (rect-x1 r) (car (car r)))
(define (rect-x2 r) (+ (car (car r)) (cdr (car r))))
(define (rect-y1 r) (car (car r)))
(define (rect-y2 r) (+ (car (cdr r)) (cdr (cdr r))))
(define (rect-w  r) (cdr (car r)))
(define (rect-h  r) (cdr (cdr r)))

(define (rect-perimeter r)
	(* 2 (+ (rect-w r) (rect-h r))))
(define (rect-area r)
	(* (rect-w r) (rect-h r)))
